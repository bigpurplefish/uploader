{% comment %}
  Product Description with Audience Tabs

  This snippet displays product descriptions with optional tabbed interface for multiple audiences.

  Usage:
  {% render 'product-description-tabs', product: product %}

  Requirements:
  - Metafield: product.metafields.custom.audience_config (JSON)
  - Metafield: product.metafields.custom.description_audience_1 (multi_line_text_field)
  - Metafield: product.metafields.custom.description_audience_2 (multi_line_text_field)
{% endcomment %}

{% assign audience_config = product.metafields.custom.audience_config %}
{% assign description_1 = product.metafields.custom.description_audience_1 %}
{% assign description_2 = product.metafields.custom.description_audience_2 %}

{% comment %} Parse audience config JSON {% endcomment %}
{% if audience_config %}
  {% assign config = audience_config | parse_json %}
  {% assign audience_count = config.count %}
{% else %}
  {% assign audience_count = 1 %}
{% endif %}

<div class="product-description-container">
  {% if audience_count == 2 and description_1 and description_2 %}
    {% comment %} MULTIPLE AUDIENCES - Display tabs {% endcomment %}

    <div class="audience-tabs" data-audience-tabs>
      {% comment %} Tab buttons {% endcomment %}
      <div class="audience-tabs__buttons" role="tablist">
        <button
          class="audience-tabs__button audience-tabs__button--active"
          data-tab="audience-1"
          role="tab"
          aria-selected="true"
          aria-controls="panel-audience-1"
          id="tab-audience-1"
        >
          {% comment %} Home icon from Polaris {% endcomment %}
          <svg class="audience-tabs__icon" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
            <path d="M10.707 2.293a1 1 0 0 0-1.414 0l-7 7a1 1 0 0 0 1.414 1.414L4 10.414V17a1 1 0 0 0 1 1h2a1 1 0 0 0 1-1v-2a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v2a1 1 0 0 0 1 1h2a1 1 0 0 0 1-1v-6.586l.293.293a1 1 0 0 0 1.414-1.414l-7-7z"/>
          </svg>
          <span>{{ config.tab_1_label | default: "Audience 1" }}</span>
        </button>

        <button
          class="audience-tabs__button"
          data-tab="audience-2"
          role="tab"
          aria-selected="false"
          aria-controls="panel-audience-2"
          id="tab-audience-2"
        >
          {% comment %} Tools icon from Polaris {% endcomment %}
          <svg class="audience-tabs__icon" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
            <path d="M10.75 6.75a.75.75 0 0 0-1.5 0v2.5h-2.5a.75.75 0 0 0 0 1.5h2.5v2.5a.75.75 0 0 0 1.5 0v-2.5h2.5a.75.75 0 0 0 0-1.5h-2.5v-2.5z"/>
            <path fill-rule="evenodd" d="M10 18a8 8 0 1 0 0-16 8 8 0 0 0 0 16zm0-1.5a6.5 6.5 0 1 0 0-13 6.5 6.5 0 0 0 0 13z"/>
          </svg>
          <span>{{ config.tab_2_label | default: "Audience 2" }}</span>
        </button>
      </div>

      {% comment %} Tab panels {% endcomment %}
      <div class="audience-tabs__panels">
        <div
          class="audience-tabs__panel audience-tabs__panel--active"
          id="panel-audience-1"
          role="tabpanel"
          aria-labelledby="tab-audience-1"
          tabindex="0"
        >
          <div class="product-description__content rte">
            {{ description_1 }}
          </div>
        </div>

        <div
          class="audience-tabs__panel"
          id="panel-audience-2"
          role="tabpanel"
          aria-labelledby="tab-audience-2"
          tabindex="0"
          hidden
        >
          <div class="product-description__content rte">
            {{ description_2 }}
          </div>
        </div>
      </div>
    </div>

  {% else %}
    {% comment %} SINGLE AUDIENCE - Display standard description {% endcomment %}

    <div class="product-description__content rte">
      {% if description_1 %}
        {{ description_1 }}
      {% else %}
        {{ product.description }}
      {% endif %}
    </div>

  {% endif %}
</div>

<style>
  .product-description-container {
    margin: 2rem 0;
  }

  .audience-tabs {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
  }

  .audience-tabs__buttons {
    display: flex;
    gap: 0.5rem;
    border-bottom: 2px solid #e5e7eb;
    flex-wrap: wrap;
  }

  /* Stack tabs vertically on mobile */
  @media (max-width: 480px) {
    .audience-tabs__buttons {
      flex-direction: column;
      border-bottom: none;
      gap: 0.75rem;
    }
  }

  .audience-tabs__button {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.75rem 1.5rem;
    background: transparent;
    border: 2px solid transparent;
    border-bottom: none;
    cursor: pointer;
    font-size: 1rem;
    font-weight: 500;
    color: #6b7280;
    transition: all 0.2s ease;
    border-radius: 0.5rem 0.5rem 0 0;
    position: relative;
    bottom: -2px;
  }

  @media (max-width: 480px) {
    .audience-tabs__button {
      width: 100%;
      justify-content: center;
      border-radius: 0.5rem;
      border: 2px solid #e5e7eb;
      bottom: 0;
    }
  }

  .audience-tabs__button:hover {
    color: #111827;
    background: #f9fafb;
  }

  .audience-tabs__button--active {
    color: #111827;
    border-color: #e5e7eb;
    border-bottom-color: white;
    background: white;
  }

  @media (max-width: 480px) {
    .audience-tabs__button--active {
      background: #3b82f6;
      color: white;
      border-color: #3b82f6;
    }
  }

  .audience-tabs__icon {
    width: 1.25rem;
    height: 1.25rem;
    fill: currentColor;
  }

  .audience-tabs__panels {
    margin-top: 0;
  }

  .audience-tabs__panel {
    display: none;
    animation: fadeIn 0.3s ease;
  }

  .audience-tabs__panel--active {
    display: block;
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .product-description__content {
    line-height: 1.6;
  }

  /* Ensure rte content is styled properly */
  .rte h3 {
    margin-top: 1.5rem;
    margin-bottom: 0.75rem;
    font-size: 1.125rem;
    font-weight: 600;
  }

  .rte ul {
    margin: 1rem 0;
    padding-left: 1.5rem;
  }

  .rte li {
    margin-bottom: 0.5rem;
  }

  .rte p {
    margin-bottom: 1rem;
  }

  .rte strong {
    font-weight: 600;
  }
</style>

<script>
(function() {
  'use strict';

  // Initialize audience tabs
  function initAudienceTabs() {
    const tabsContainer = document.querySelector('[data-audience-tabs]');
    if (!tabsContainer) return;

    const buttons = tabsContainer.querySelectorAll('.audience-tabs__button');
    const panels = tabsContainer.querySelectorAll('.audience-tabs__panel');

    // Handle tab click
    buttons.forEach(function(button) {
      button.addEventListener('click', function() {
        const targetTab = this.getAttribute('data-tab');

        // Update buttons
        buttons.forEach(function(btn) {
          btn.classList.remove('audience-tabs__button--active');
          btn.setAttribute('aria-selected', 'false');
        });
        this.classList.add('audience-tabs__button--active');
        this.setAttribute('aria-selected', 'true');

        // Update panels
        panels.forEach(function(panel) {
          if (panel.id === 'panel-' + targetTab) {
            panel.classList.add('audience-tabs__panel--active');
            panel.removeAttribute('hidden');
            panel.focus();
          } else {
            panel.classList.remove('audience-tabs__panel--active');
            panel.setAttribute('hidden', '');
          }
        });
      });

      // Keyboard navigation
      button.addEventListener('keydown', function(e) {
        const currentIndex = Array.from(buttons).indexOf(this);
        let targetIndex;

        if (e.key === 'ArrowLeft' || e.key === 'ArrowUp') {
          e.preventDefault();
          targetIndex = currentIndex === 0 ? buttons.length - 1 : currentIndex - 1;
        } else if (e.key === 'ArrowRight' || e.key === 'ArrowDown') {
          e.preventDefault();
          targetIndex = currentIndex === buttons.length - 1 ? 0 : currentIndex + 1;
        } else if (e.key === 'Home') {
          e.preventDefault();
          targetIndex = 0;
        } else if (e.key === 'End') {
          e.preventDefault();
          targetIndex = buttons.length - 1;
        }

        if (targetIndex !== undefined) {
          buttons[targetIndex].click();
          buttons[targetIndex].focus();
        }
      });
    });
  }

  // Initialize on DOM ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initAudienceTabs);
  } else {
    initAudienceTabs();
  }
})();
</script>
