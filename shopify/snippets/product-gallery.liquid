{%- if product.media.size > 0 -%}
  {%- assign show_thumbnails_if_one_media = true -%}

  <div class="card">
    <div class="card__section card__section--tight">
      <div class="product-gallery {% if show_thumbnails_if_one_media %}product-gallery--with-thumbnails{% endif %}">
        {%- assign selected_media = product.selected_variant.featured_media | default: product.featured_media -%}

        <div class="product-gallery__carousel-wrapper">
          <div class="product-gallery__carousel {% if template != 'product.quick-view' and section.settings.enable_image_zoom %}product-gallery__carousel--zoomable{% endif %}" data-media-count="{{ product.media.size }}" data-initial-media-id="{{ selected_media.id }}">
            {%- for media in product.media -%}
              {%- assign is_media_group = false -%}
              {%- assign is_media_filtered = false -%}
              {%- assign media_alt = media.alt -%}

              {%- comment -%}
              DISABLED: Liquid-side filtering (conflicts with multi-selector JavaScript filtering)
              JavaScript filtering below handles multi-hashtag format correctly
              {%- endcomment -%}

              {%- comment -%}
              {%- if media.alt contains '#' -%}
                {%- assign is_media_group = true -%}
                {%- assign alt_parts = media.alt | split: '#' -%}

                {%- comment -%}
                If the custom ALT tag contains two parts (for instance "My custom alt # color_blue") then the first part is actually used
                as a custom ALT tag
                {%- endcomment -%}

                {%- if alt_parts.size == 2 and alt_parts.first != blank -%}
                  {%- assign media_alt = alt_parts.first | strip -%}
                {%- else -%}
                  {%- assign media_alt = product.title -%}
                {%- endif -%}

                {%- assign media_group_parts = alt_parts.last | split: '_' -%}

                {%- for option in product.options -%}
                  {%- assign downcase_option = option | downcase -%}
                  {%- assign downcase_group_option = media_group_parts.first | strip | downcase -%}

                  {%- if downcase_option == downcase_group_option -%}
                    {%- assign option_setting = 'option' | append: forloop.index -%}
                    {%- assign option_value = product.selected_or_first_available_variant[option_setting] | downcase -%}

                    {%- assign downcase_group_value = media_group_parts.last | strip | downcase -%}
                    {%- assign media_variant_ids = media.variants | map: 'id' -%}

                    {%- if option_value != downcase_group_value -%}
                      {%- unless media_variant_ids contains product.selected_or_first_available_variant.id -%}
                        {%- assign is_media_filtered = true -%}
                      {%- endunless -%}
                    {%- endif -%}

                    {%- break -%}
                  {%- endif -%}
                {%- endfor -%}
              {%- endif -%}
              {%- endcomment -%}

              <div class="product-gallery__carousel-item {% if media.id == selected_media.id %}is-selected{% endif %} {% if is_media_filtered %}is-filtered{% endif %}" tabindex="-1" data-media-id="{{ media.id }}" data-media-type="{{ media.media_type | escape }}" data-media-alt="{{ media.alt | escape }}" {% if media.media_type == 'external_video' %}data-media-host="{{ media.host | escape }}" data-video-id="{{ media.external_id | escape }}"{% endif %} {% if is_media_group %}data-group-name="{{ media_group_parts.first | strip | downcase | escape }}" data-group-value="{{ media_group_parts.last | strip | downcase | escape }}"{% endif %}>
                {%- case media.media_type -%}
                  {%- when 'image' -%}
                    <div class="product-gallery__size-limiter" style="max-width: {{ media.width }}px">
                      {%- assign data_zoom_url = media | image_url: width: 1800 -%}
                      {%- assign data_zoom_width = 1800 | at_most: media.width -%}

                      <div class="aspect-ratio" style="padding-bottom: {{ 100.0 | divided_by: media.aspect_ratio }}%">
                        {{- media | image_url: width: media.width | image_tag: loading: 'lazy', widths: '400,500,600,700,800,900,1000,1100,1200', class: 'product-gallery__image', data-zoom: data_zoom_url, data-zoom-width: data_zoom_width, alt: media_alt -}}
                      </div>
                    </div>

                  {%- when 'model' -%}
                    <div class="product-gallery__model">
                      <div class="model-wrapper">
                        {{- media | model_viewer_tag: image_size: '1024x', reveal: 'interaction', toggleable: true -}}
                      </div>
                    </div>

                  {%- when 'external_video' -%}
                    <div class="product-gallery__external-video">
                      <div class="video-wrapper">
                        {{- media | external_video_tag: image_size: '1024x', loop: section.settings.enable_video_looping -}}
                      </div>
                    </div>

                  {%- when 'video' -%}
                    <div class="product-gallery__video">
                      <div class="video-wrapper video-wrapper--native" style="padding-bottom: {{ 100.0 | divided_by: media.aspect_ratio }}%">
                        {{- media | video_tag: image_size: '1024x', controls: true -}}
                      </div>
                    </div>
                {%- endcase -%}
              </div>
            {%- endfor -%}
          </div>

          {%- comment -%}Add the "view in your space" button, which allows to show the product in customer's environment (if the device supports it){%- endcomment -%}
          {%- assign first_3d_model = product.media | where: 'media_type', 'model' | first -%}

          {%- if first_3d_model -%}
            <button class="product-gallery__view-in-space button button--full" data-shopify-xr data-shopify-model3d-id="{{ first_3d_model.id }}" data-shopify-model3d-default-id="{{ first_3d_model.id }}" data-shopify-title="{{ product.title | escape }}" data-shopify-xr-hidden>
              {%- render 'icon', icon: 'media-view-in-space' -%} {{- 'product.general.view_in_space' | t -}}
            </button>
          {%- endif -%}

          {%- if template != 'product.quick-view' and section.settings.enable_image_zoom -%}
            <span class="product-gallery__zoom-notice">
              {% render 'icon', icon: 'zoom' %}
              <span class="hidden-pocket">{{ 'product.general.zoom' | t }}</span>
              <span class="hidden-lap-and-up">{{ 'product.general.zoom_mobile' | t }}</span>
            </span>
          {%- endif -%}
        </div>

        {%- if show_thumbnails_if_one_media -%}
          <div class="scroller">
            <div class="scroller__inner">
              <div class="product-gallery__thumbnail-list">
                {%- for media in product.media -%}
                  {%- assign is_media_group = false -%}
                  {%- assign is_media_filtered = false -%}
                  {%- assign media_alt = media.alt -%}

                  {%- comment -%}
                  DISABLED: Liquid-side filtering (conflicts with multi-selector JavaScript filtering)
                  JavaScript filtering below handles multi-hashtag format correctly
                  {%- endcomment -%}

                  {%- comment -%}
                  {%- if media.alt contains '#' -%}
                    {%- assign is_media_group = true -%}
                    {%- assign alt_parts = media.alt | split: '#' -%}

                    {%- comment -%}
                      If the custom ALT tag contains two parts (for instance "My custom alt # color_blue") then the first part is actually used
                      as a custom ALT tag
                    {%- endcomment -%}

                    {%- if alt_parts.size == 2 and alt_parts.first != blank -%}
                      {%- assign media_alt = alt_parts.first | strip -%}
                    {%- else -%}
                      {%- assign media_alt = product.title -%}
                    {%- endif -%}

                    {%- assign media_group_parts = alt_parts.last | split: '_' -%}

                    {%- for option in product.options -%}
                      {%- assign downcase_option = option | downcase -%}
                      {%- assign downcase_group_option = media_group_parts.first | strip | downcase -%}

                      {%- if downcase_option == downcase_group_option -%}
                        {%- assign option_setting = 'option' | append: forloop.index -%}
                        {%- assign option_value = product.selected_or_first_available_variant[option_setting] | downcase -%}

                        {%- assign downcase_group_value = media_group_parts.last | strip | downcase -%}
                        {%- assign media_variant_ids = media.variants | map: 'id' -%}

                        {%- if option_value != downcase_group_value -%}
                          {%- unless media_variant_ids contains product.selected_or_first_available_variant.id -%}
                            {%- assign is_media_filtered = true -%}
                          {%- endunless -%}
                        {%- endif -%}

                        {%- break -%}
                      {%- endif -%}
                    {%- endfor -%}
                  {%- endif -%}
                  {%- endcomment -%}

                  <a href="{{ media | img_url: '1024x' }}" rel="noopener" class="product-gallery__thumbnail {% if media.id == selected_media.id %}is-nav-selected{% endif %} {% if is_media_filtered %}is-filtered{% endif %}" data-media-id="{{ media.id }}" data-media-alt="{{ media.alt | escape }}" {% if is_media_group %}data-group-name="{{ media_group_parts.first | strip | downcase | escape }}" data-group-value="{{ media_group_parts.last | strip | downcase | escape }}"{% endif %}>
                    {%- comment -%}Based on the type of media, we have to add an icon as per Shopify rules{%- endcomment -%}

                    {%- case media.media_type -%}
                      {%- when 'model' -%}
                        <span class="product-gallery__thumbnail-badge">{% render 'icon', icon: 'media-model-badge' %}</span>

                      {%- when 'video' or 'external_video' -%}
                        <span class="product-gallery__thumbnail-badge">{% render 'icon', icon: 'media-video-badge' %}</span>
                    {%- endcase -%}

                    {{- media | image_url: width: media.width | image_tag: loading: 'lazy', sizes: '130px', widths: '130,260,390', alt: media_alt -}}
                  </a>
                {%- endfor -%}
              </div>
            </div>
          </div>
        {%- endif -%}

        {%- if section.settings.enable_image_zoom -%}
          {%- comment -%}This code is used to power the mobile zoom and must not be removed nor altered{%- endcomment -%}
          <div class="pswp" tabindex="-1" role="dialog" aria-hidden="true">
            <div class="pswp__bg"></div>
            <div class="pswp__scroll-wrap">
              <div class="pswp__container">
                <div class="pswp__item"></div>
                <div class="pswp__item"></div>
                <div class="pswp__item"></div>
              </div>

              <div class="pswp__ui">
                <button class="pswp__button pswp__button--close" aria-label="{{ 'general.accessibility.close' | t }}">
                  {% render 'icon', icon: 'close-2' %}
                </button>

                <div class="pswp__prev-next">
                  <button class="pswp__button pswp__button--arrow--left" aria-label="{{ 'general.accessibility.previous' | t }}">
                    {% render 'icon', icon: 'arrow-left' %}
                  </button>

                  <button class="pswp__button pswp__button--arrow--right" aria-label="{{ 'general.accessibility.next' | t }}">
                    {% render 'icon', icon: 'arrow-right' %}
                  </button>
                </div>

                <div class="pswp__pagination">
                  <span class="pswp__pagination-current"></span> / <span class="pswp__pagination-count"></span>
                </div>
              </div>
            </div>
          </div>
        {%- endif -%}
      </div>
    </div>
  </div>

  {%- comment -%}
  ============================================================================
  MULTI-SELECTOR MEDIA FILTERING (Images, Videos, GIFs)
  Custom JavaScript to extend Warehouse theme's single-selector filtering
  to support multiple option selectors (Color + Texture + Size)
  Now supports: images, native videos, external videos (YouTube/Vimeo), and GIFs
  ============================================================================
  {%- endcomment -%}
  <script>
    (function() {
      'use strict';
      
      // Only run on actual product pages, not quick view
      if (!document.querySelector('[data-section-type="product"]')) {
        return;
      }

      // Configuration: Define which product options should be used for filtering
      const FILTER_OPTIONS = ['Color Description', 'Colour Description', 'Color', 'Colour', 'Texture', 'Item Size Description', 'Size'];

      // VERSION CHECK: v3.0 - Enhanced logging and real-time filtering
      console.log('Multi-selector filtering: VERSION 3.0 LOADED');
      
      // Wait for DOM to be ready
      function init() {
        // Get all variant selectors (dropdowns, radio buttons, swatches)
        const variantSelectors = getVariantSelectors();
        
        if (variantSelectors.length === 0) {
          console.log('Multi-selector filtering: No variant selectors found');
          return;
        }

        console.log('Multi-selector filtering: Initialized with', variantSelectors.length, 'selectors');

        // Listen for changes on all variant selectors
        variantSelectors.forEach(function(selector) {
          if (selector.tagName === 'SELECT') {
            selector.addEventListener('change', function() {
              console.log('Dropdown changed, filtering media...');
              filterMedia();
            });
          } else if (selector.tagName === 'INPUT') {
            selector.addEventListener('change', function() {
              console.log('Radio changed, filtering media...');
              filterMedia();
            });
          }
        });

        // Run initial filter on page load
        setTimeout(filterMedia, 100);
      }

      function getVariantSelectors() {
        const selectors = [];
        
        // Get all select dropdowns
        const selectElements = document.querySelectorAll('.product-form__option select, select[name^="option"]');
        selectElements.forEach(function(select) {
          selectors.push(select);
        });

        // Get all radio buttons (for block/swatch style selectors)
        const radioElements = document.querySelectorAll('.product-form__option input[type="radio"], input[name^="option"]');
        radioElements.forEach(function(radio) {
          selectors.push(radio);
        });

        return selectors;
      }

      function getSelectedOptionValues() {
        const values = [];

        console.log('Multi-selector filtering: Getting selected option values...');

        // PRIMARY METHOD: Get from form controls directly (most reliable for real-time changes)

        // Get all checked radio buttons (for block/swatch selectors)
        const radios = document.querySelectorAll('.product-form__option input[type="radio"]:checked, input[name^="option"]:checked');
        console.log('Multi-selector filtering: Found ' + radios.length + ' checked radio buttons');
        radios.forEach(function(radio) {
          // Get option value from the label, not the radio value (which is variant ID)
          const label = document.querySelector('label[for="' + radio.id + '"]');
          if (label) {
            // Try title attribute first (contains full text), then text content
            let optionValue = label.getAttribute('title');

            // Title might have dimensions after " - ", extract just the option value
            // Example: "20 X 10 & 20 X 20 - A: 20 × 10 × 2 ¼ in (508 × 254 × 57 mm)"
            // We want: "20 X 10 & 20 X 20"
            if (optionValue) {
              // Split on newline first (in case dimensions are on new line)
              if (optionValue.includes('\n')) {
                optionValue = optionValue.split('\n')[0].trim();
              }
              // Then split on " - " to remove dimensions on same line
              if (optionValue.includes(' - ')) {
                optionValue = optionValue.split(' - ')[0].trim();
              }
            }

            // Fallback to text content if no title
            if (!optionValue) {
              optionValue = label.textContent.trim();
            }

            console.log('Multi-selector filtering: Radio label text: "' + optionValue + '"');

            if (optionValue) {
              const normalized = normalizeValue(optionValue);
              console.log('Multi-selector filtering: Normalized to: "' + normalized + '"');
              values.push(normalized);
            }
          }
        });

        // Get all selects (if any dropdowns are used)
        const selects = document.querySelectorAll('.product-form__option select, select[name^="option"]');
        console.log('Multi-selector filtering: Found ' + selects.length + ' select dropdowns');
        selects.forEach(function(select) {
          const selectedOption = select.options[select.selectedIndex];
          if (selectedOption && selectedOption.text && selectedOption.text !== 'Sold out') {
            // Extract option text, removing any " - Sold out" suffix
            const optionText = selectedOption.text.replace(/ - .*$/, '').trim();
            console.log('Multi-selector filtering: Select option text: "' + optionText + '"');
            if (optionText) {
              const normalized = normalizeValue(optionText);
              console.log('Multi-selector filtering: Normalized to: "' + normalized + '"');
              values.push(normalized);
            }
          }
        });

        if (values.length > 0) {
          console.log('Multi-selector filtering: Got values from form controls:', values);
          return values;
        }

        // FALLBACK: Try variant data JSON if form controls didn't work
        console.log('Multi-selector filtering: No values from form controls, trying JSON...');
        const variantDataScript = document.querySelector('script[data-variant][type="application/json"]');
        if (variantDataScript) {
          try {
            const variantData = JSON.parse(variantDataScript.textContent);
            console.log('Multi-selector filtering: Variant data from JSON:', variantData);
            if (variantData && variantData.options && Array.isArray(variantData.options)) {
              variantData.options.forEach(function(optionValue) {
                if (optionValue && optionValue !== 'Default Title') {
                  const normalized = normalizeValue(optionValue);
                  console.log('Multi-selector filtering: JSON option "' + optionValue + '" -> "' + normalized + '"');
                  values.push(normalized);
                }
              });
            }
          } catch (e) {
            console.log('Multi-selector filtering: Could not parse variant data JSON', e);
          }
        }

        console.log('Multi-selector filtering: Final selected values:', values);
        return values;
      }

      function normalizeValue(value) {
        // Normalize value: uppercase, replace spaces and special chars with underscores
        // MUST match Python's format_value_for_filter_tag() in utils.py
        var formatted = value.toString().toUpperCase();

        // Replace each special character with underscore (matches Python logic)
        var specialChars = [' ', '-', '/', '&', '+', ',', '.'];
        for (var i = 0; i < specialChars.length; i++) {
          // Use split/join to replace all occurrences
          formatted = formatted.split(specialChars[i]).join('_');
        }

        return formatted;
      }

      function filterMedia() {
        const selectedValues = getSelectedOptionValues();
        
        if (selectedValues.length === 0) {
          console.log('Multi-selector filtering: No values selected');
          return;
        }

        console.log('Multi-selector filtering: Selected values:', selectedValues);

        // Get all carousel items and thumbnails
        const carouselItems = document.querySelectorAll('.product-gallery__carousel-item');
        const thumbnails = document.querySelectorAll('.product-gallery__thumbnail');

        let visibleCount = 0;
        let firstVisibleItem = null;

        carouselItems.forEach(function(item, index) {
          // Get alt text from data attribute (works for all media types)
          const altText = item.getAttribute('data-media-alt') || '';
          const mediaType = item.getAttribute('data-media-type') || 'image';
          
          // Check if this media should be visible
          const shouldShow = shouldShowMedia(altText, selectedValues);

          if (shouldShow) {
            item.classList.remove('is-filtered');
            if (thumbnails[index]) {
              thumbnails[index].classList.remove('is-filtered');
            }
            visibleCount++;
            if (!firstVisibleItem) {
              firstVisibleItem = item;
            }
          } else {
            item.classList.add('is-filtered');
            if (thumbnails[index]) {
              thumbnails[index].classList.add('is-filtered');
            }
          }
        });

        console.log('Multi-selector filtering: Showing', visibleCount, 'of', carouselItems.length, 'media items');

        // If the currently selected media is now hidden, select the first visible one
        const currentlySelected = document.querySelector('.product-gallery__carousel-item.is-selected');
        if (currentlySelected && currentlySelected.classList.contains('is-filtered') && firstVisibleItem) {
          console.log('Multi-selector filtering: Currently selected image is filtered, selecting first visible');
          // Remove is-selected from current
          currentlySelected.classList.remove('is-selected');

          // Add is-selected to first visible
          firstVisibleItem.classList.add('is-selected');

          // Update thumbnail selection
          const firstVisibleIndex = Array.from(carouselItems).indexOf(firstVisibleItem);
          document.querySelectorAll('.product-gallery__thumbnail').forEach(function(thumb) {
            thumb.classList.remove('is-nav-selected');
          });
          if (thumbnails[firstVisibleIndex]) {
            thumbnails[firstVisibleIndex].classList.add('is-nav-selected');
          }
        }
      }

      function shouldShowMedia(altText, selectedValues) {
        // If media has no # tags, show it for all variants (universal media)
        if (!altText.includes('#')) {
          console.log('Multi-selector filtering: Image has no hashtags, showing');
          return true;
        }

        // Extract all tags from alt text
        // Format: "Description #VALUE1#VALUE2#VALUE3"
        const parts = altText.split('#');
        if (parts.length < 2) {
          console.log('Multi-selector filtering: No valid hashtags found, showing by default');
          return true; // No valid tags, show by default
        }

        // Get all tag values (everything after the first #)
        const mediaTags = [];
        for (let i = 1; i < parts.length; i++) {
          const tag = parts[i].trim();
          if (tag) {
            const normalizedTag = normalizeValue(tag);
            mediaTags.push(normalizedTag);
          }
        }

        console.log('Multi-selector filtering: Image alt="' + altText.substring(0, 50) + '..."');
        console.log('Multi-selector filtering: Extracted media tags:', mediaTags);

        if (mediaTags.length === 0) {
          console.log('Multi-selector filtering: No valid tags after normalization, showing');
          return true; // No valid tags found
        }

        // For multi-selector filtering:
        // Show media if ALL selected values are present in the media tags
        let matchCount = 0;
        selectedValues.forEach(function(selectedValue) {
          if (mediaTags.includes(selectedValue)) {
            matchCount++;
            console.log('Multi-selector filtering: ✓ Match found for "' + selectedValue + '"');
          } else {
            console.log('Multi-selector filtering: ✗ No match for "' + selectedValue + '"');
          }
        });

        const shouldShow = matchCount === selectedValues.length;
        console.log('Multi-selector filtering: Match count: ' + matchCount + '/' + selectedValues.length + ' -> ' + (shouldShow ? 'SHOW' : 'HIDE'));

        // Media should be shown if all selected values match
        return shouldShow;
      }

      // Initialize when DOM is ready
      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', init);
      } else {
        init();
      }

      // Listen for variant changes from Shopify and theme
      document.addEventListener('variant:changed', function(event) {
        console.log('variant:changed event fired, filtering media...');
        filterMedia();
      });

      // Listen for form changes (more reliable for Warehouse theme)
      var productForm = document.querySelector('[id^="product-form"]');
      if (productForm) {
        productForm.addEventListener('change', function(event) {
          if (event.target.matches('input[name^="option"], select[name^="option"]')) {
            console.log('Form input changed, filtering media...');
            // Small delay to ensure variant data JSON is updated
            setTimeout(filterMedia, 50);
          }
        });
      }
    })();
  </script>
{%- endif -%}